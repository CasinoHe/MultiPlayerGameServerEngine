name: Windows

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  VCPKG_DEFAULT_TRIPLET: x64-windows
  BUILD_TYPE: [Debug, Release]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    # checkout repository and submodules
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    # get cmake
    - name: Get cmake
      uses: lukka/get-cmake@latest
    
    - name: Restore vcpkg and its artifacts.
      uses: actions/cache@v3
      id: vcpkg-cache
      with:
        # The first path is where vcpkg generates artifacts while consuming the vcpkg.json manifest file.
        # The second path is the location of vcpkg (it contains the vcpkg executable and data files).
        # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
        path: |
          ${{ env.VCPKG_ROOT }}
          ${{ github.workspace }}/build/vcpkg_installed
          !${{ env.VCPKG_ROOT }}/.git
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
        # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
        # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
        # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
        key: |
          ${{ hashFiles( 'vcpkg.json' ) }}-${{ runner.os }}-cache-key-v1

    - name: Get vcpkg
      if: ${{ runner.os == 'Windows' && steps.vcpkg-cache.outputs.cache-hit != 'true' }}
      run: |
        cd ${{github.workspace}}
        mkdir build -force
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        vcpkg integrate install

    - name: Running cmake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build Solution
      run: |
        cd build
        cmake --build . --parallel --config ${{env.BUILD_TYPE}}
